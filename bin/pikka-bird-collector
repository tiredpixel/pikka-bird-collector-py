#!/usr/bin/env python

import argparse
import logging
import os
import random
import time

import pikka_bird_collector.collector
import pikka_bird_collector.sender


defaults = {
    'command': 'collect',
    'log_level': 'INFO',
    'server_uri': 'http://localhost:5000'}

parser = argparse.ArgumentParser(
    description="Pikka Bird ops monitoring tool Collector component.")

parser.add_argument('-c', '--command',
    metavar='COMMAND',
    choices=['collect'],
    default=defaults['command'],
    help="command (default: %(command)s)" % defaults)

parser.add_argument('-s', '--server-uri',
    metavar='SERVER_URI',
    default=defaults['server_uri'],
    help="server URI (default: %(server_uri)s))" % defaults)

parser.add_argument('--log-level',
    metavar='LOG_LEVEL',
    choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
    default=defaults['log_level'],
    help="log-level (default: %(log_level)s))" % defaults)

parser.add_argument('-e', '--eternal',
    metavar='ETERNAL',
    type=int,
    help="run eternally, every ETERNAL s")

parser.add_argument('-v', '--version',
    action='version',
    version="Pikka Bird Collector v%(v)s" % { 'v': pikka_bird_collector.__version__ })

args = parser.parse_args()


logger = logging.getLogger(str(os.getpid()))

formatter = logging.Formatter(
    '[%(asctime)s] %(levelname)s -- %(name)s: %(message)s')

ch = logging.StreamHandler()
ch.setFormatter(formatter)

logger.setLevel(args.log_level)
logger.addHandler(ch)


def __calculate_eternal_sleep(interval):
    mid = round(interval / 2)
    
    return random.randint(interval - mid, interval + mid)


if args.command == 'collect':
    collector = pikka_bird_collector.collector.Collector(
        logger=logger)
    sender = pikka_bird_collector.sender.Sender(args.server_uri,
        logger=logger)
    
    running = True
    
    while running:
        try:
            collection = collector.collect()
            sender.send(collection)
            
            if args.eternal is None:
                running = False
            else:
                s = __calculate_eternal_sleep(args.eternal)
                logger.info("WATCHING Perfectly Normal Beasts (%d s)" % s)
                time.sleep(s)
        except KeyboardInterrupt:
            running = False
